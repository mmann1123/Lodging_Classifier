names(damage) = c('ZONECODE','Year','Pests','Manage','Other','Drought')
#Limit to drought year
damage= damage[damage$Year==2015,]
#join to zone map
damage_poly = left_join(zones,damage,by='ZONECODE')
# rasterize damage
damage_raster = rasterize(as(damage_poly,'Spatial'),elevation,field='Drought')
damage_raster.p <- rasterToPoints(damage_raster)
damage_raster.df = data.frame(damage_raster.p)
names(damage_raster.df)  =c("lon", "lat","Drought Damage")
plot(rainshadow)
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) + geom_sf(data= rainshadow ,  aes(color="red" ),size=0.5, alpha=0.35) + annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) + geom_sf(data= rainshadow ,  aes(color="red",fill=NULL ),size=0.5, alpha=0.35) + annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red",fill='red' ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red",fill=FID ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red",fill= NULL ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
#geom_sf(data= rainshadow ,  aes(color="red",fill= NULL ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red",fill= NULL ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red",fill= NA ),size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red" ),fill= NA,size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
# geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
geom_sf(data= rainshadow ,  aes(color="red" ),fill= NA,size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
knitr::opts_chunk$set(cache=T)
#knitr::opts_chunk$set(fig_caption=F)
ggplot() +
#geom_raster(data=damage_raster.df,aes(lon,lat,fill=`Drought Damage`),alpha=0.8)  +
#scale_fill_gradientn(name="Drought\nDamage",colours =c('#b3cde3','#8c96c6','#8856a7','#810f7c')) +
scale_fill_gradientn(name="Drought\nDamage",colours =c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603')) +
geom_tile(data=elevation.df,aes(lon,lat,alpha=Elevation), fill = "grey10")  +
scale_alpha(range = c(0, 1)) + geom_sf(data= damage_poly ,  aes(fill = Drought ),size=0.5, alpha=0.35) +
#geom_sf(data= rainshadow ,  aes(color="red" ),fill= NA,size=0.5, alpha=0.35) +
annotate("text", x = 38.4, y = 13.7, label = "Ras Dashen",color='white',size=3.5) + annotate("text", x = 38.3, y = 13.1, label = "*",color='white',size=5)  +
annotate("text", x = 37.4, y = 12.5, label = "Simien Mnts",color='white',size=4,angle=15)+
annotate("text", x = 41, y = 8.5, label = "Ahmar Mnts",color='white',size=4,angle=30)+
coord_sf()
#install_github("khufkens/cropmonitor")
library(cropmonitor)
library(readstata13)
#library(RCurl)
library(foreach)
library(doParallel)
library(raster)
#cl <- makeCluster(3)
#registerDoParallel(cl)
library(jpeg)
#library("devtools")
#install_github("khufkens/cropmonitor")
library(cropmonitor)
library(readstata13)
#library(RCurl)
library(foreach)
library(doParallel)
library(raster)
#cl <- makeCluster(3)
#registerDoParallel(cl)
library(jpeg)
my.file.rename <- function(from, to) {
todir <- dirname(to)
if (!isTRUE(file.info(todir)$isdir)) dir.create(todir, recursive=TRUE)
file.copy(from = from,  to = to)
}
# image labels
setwd('/media/ssd/crop_image_classifier/Data/')
in_labels = readRDS('./cropmonitor_subset.rds')
head(in_labels)
# read in raw image data locations
in_data = read.dta13('./Pictures Data CLEAN 04_21_17.dta')
# limit to images we have lodging labels
in_data = in_data[basename(in_data$image) %in% in_labels$image_name[!is.na(in_labels$lodging)],]
head(in_data)
# resize and rotate images
setwd('/media/ssd/crop_image_classifier/Data/RawImages/')
images = list.files('.',pattern = '.jpg')
images = images[images %in% in_labels$image_name] # retain images that we have lables for
junk= foreach(path = images,.packages = c('cropmonitor','raster','jpeg')) %do% {
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep=''))
# skip value if rotating the image fails
if(inherits(rotated_img,"try-error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep=''))
# skip value if rotating the image fails
if(inherits(rotated_img,"try-error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
path
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep=''))
inherits(rotated_img,"try-error")
# skip value if rotating the image fails
if(inherits(rotated_img = read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),"try-error")){
gc() # clear memory
next
}
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
{
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep=''))
},
error=function(cond){
gc() # clear memory
next
}
)
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
raster(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep=''))
plot(raster(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')))
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img  = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),
error=function(e){ gc();next}
)
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
images
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img  = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),
error=function(e)   next
)
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),
error=function(cond) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"try-error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),
error=function(cond) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/RotateImages/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/RawImages/',path,sep='')),
error=function(e) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep=''),
quality = 1)
return(NULL)
}
# limit to AOI
setwd('/media/ssd/crop_image_classifier/Data/RotateImages/')
images = list.files('.',pattern = '.jpg')
cl <- makeCluster(3)
registerDoParallel(cl)
junk= foreach(path = images,.packages = c('cropmonitor','raster','jpeg')) %dopar% {
img_path = paste('/media/ssd/crop_image_classifier/Data/RotateImages/',path,sep='')
cropped_img = estimate_roi(img_path,padding = 0.05)
cropped_img = mask(stack(img_path),cropped_img$roi)
jpeg::writeJPEG(raster::as.array(cropped_img /255),
target = paste('/media/ssd/crop_image_classifier/Data/AoiImages/',path,sep=''),
quality = 1)
return(NULL)
}
# sort into training folders
setwd('/media/ssd/crop_image_classifier/Data/LodgingLabels')
images = list.files('../AoiImages/',pattern = '.jpg')
table(in_labels$labels)
table(in_labels$lodging)
#
for(img in images){
# move yes to yes folder
if(img %in% in_labels$image_name[in_labels$lodging=='Yes']){
my.file.rename(from=paste0('/media/ssd/crop_image_classifier/Data/AoiImages/',img),
to=paste0('/media/ssd/crop_image_classifier/Data/LodgingLabels/Yes/',img))
}
# move no to no folder
if(img %in% in_labels$image_name[in_labels$lodging=='No']){
my.file.rename(from=paste0('/media/ssd/crop_image_classifier/Data/AoiImages/',img),
to=paste0('/media/ssd/crop_image_classifier/Data/LodgingLabels/No/',img))
}
}
#library("devtools")
#install_github("khufkens/cropmonitor")
library(cropmonitor)
library(readstata13)
#library(RCurl)
library(foreach)
library(doParallel)
library(raster)
library(jpeg)
my.file.rename <- function(from, to) {
todir <- dirname(to)
if (!isTRUE(file.info(todir)$isdir)) dir.create(todir, recursive=TRUE)
file.copy(from = from,  to = to)
}
# resize and rotate images
setwd('/media/ssd/crop_image_classifier/Data/LodgingLabels/')
images = list.files('.',pattern = '.jp*')
images
# resize and rotate images
setwd('/media/ssd/crop_image_classifier/Data/LodgingLabels/')
# resize and rotate images
setwd('/media/ssd/crop_image_classifier/Data/TestingImages/')
images = list.files('.',pattern = '.jp*')
images
plot(raster(images[1]))
a = read_size(images[1])
plot(a$img)
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/TestingImages/',path,sep='')),
error=function(e) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path,sep=''),
quality = 1)
return(NULL)
}
images
path
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path))){print('skipping');next}
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/TestingImages/',path,sep='')),
error=function(e) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
plot(raster::as.array(rotated_img$img/255))
path
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/TestingImages/',path,sep='')),
error=function(e) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path,sep=''),
quality = 1)
return(NULL)
}
# limit to AOI
setwd('/media/ssd/crop_image_classifier/Data/RotateImages/')
for(path in images){
# check that image doesn't exist
if(file.exists(paste0('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path))){print('skipping');next}
print(path)
# rotate and resize
rotated_img = tryCatch(
read_size(paste('/media/ssd/crop_image_classifier/Data/TestingImages/',path,sep='')),
error=function(e) e
)
# skip value if rotating the image fails
if(inherits(rotated_img,"error")){
gc() # clear memory
next
}
# write out file
jpeg::writeJPEG(raster::as.array(rotated_img$img/255),
target = paste('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path,sep=''),
quality = 1)
}
# limit to AOI
setwd('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/')
images = list.files('.',pattern = '.jpg')
a = raster(images[1])
plot(a)
# limit to AOI
setwd('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/')
images = list.files('.',pattern = '.jpg')
a = raster(images[1])
plot(a)
images
a
plot(a)
image(a)
aoi = estimate_roi(images[1],padding = 0.05)
plot(aoi$roi,add=T)
plot(mask(a,aoi$roi))
cl <- makeCluster(3)
registerDoParallel(cl)
junk= foreach(path = images,.packages = c('cropmonitor','raster','jpeg')) %dopar% {
img_path = paste('/media/ssd/crop_image_classifier/Data/TestingImages_Rotated/',path,sep='')
cropped_img = estimate_roi(img_path,padding = 0.05)
cropped_img = mask(stack(img_path),cropped_img$roi)
jpeg::writeJPEG(raster::as.array(cropped_img /255),
target = paste('/media/ssd/crop_image_classifier/Data/TestingImages_AOI/',path,sep=''),
quality = 1)
return(NULL)
}
